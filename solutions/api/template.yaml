AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31

Parameters:
  Environment:
    Type: String
    Description: >
      The environment type
    AllowedValues:
      - "dev"
      - "build"
      - "staging"
      - "integration"
      - "production"
  CodeSigningConfigArn:
    Type: String
    Description: >
      The ARN of the Code Signing Config to use, provided by the deployment pipeline
    Default: "none"
  PermissionsBoundary:
    Type: String
    Description: >
      The ARN of the permissions boundary to apply to any role created by the template, provided by the deployment pipeline
    Default: "none"
  VpcStackName:
    Type: String
    Description: >
      The name of the stack that defines the VPC in which resources will be located, provided by the deployment pipeline
  CoreStackName:
    Type: String
    Default: "components-core"
  LambdaArchitecture:
    Type: String
    Description: >
      The Lambda function architecture
    AllowedValues:
      - "x86_64"
      - "arm64"
    Default: "arm64"
  LambdaDeploymentPreference:
    Description: Specifies the configuration to enable gradual Lambda deployments. It can be used to set deployment type and also allows skipping canary deployment by setting to 'AllAtOnce'
    Type: String
    Default: "Canary10Percent10Minutes"
    AllowedValues:
      - AllAtOnce
      - Canary10Percent5Minutes
      - Canary10Percent10Minutes
      - Canary10Percent15Minutes
      - Canary10Percent30Minutes

Mappings:
  EnvironmentConfiguration:
    dev:
      dynatraceSecretArn: arn:aws:secretsmanager:eu-west-2:216552277552:secret:DynatraceNonProductionVariables # pragma: allowlist-secret
      apiDomain: api.manage.dev.account.gov.uk
      authorizeErrorPageUrl: http://manage.dev.account.gov.uk/authorize-error
      LambdaLogLevel: DEBUG
      UseCanary: false
    build:
      dynatraceSecretArn: arn:aws:secretsmanager:eu-west-2:216552277552:secret:DynatraceNonProductionVariables # pragma: allowlist-secret
      apiDomain: api.manage.build.account.gov.uk
      authorizeErrorPageUrl: http://manage.build.account.gov.uk/authorize-error
      LambdaLogLevel: INFO
      UseCanary: false
    staging:
      dynatraceSecretArn: arn:aws:secretsmanager:eu-west-2:216552277552:secret:DynatraceNonProductionVariables # pragma: allowlist-secret
      apiDomain: api.manage.staging.account.gov.uk
      authorizeErrorPageUrl: http://manage.staging.account.gov.uk/authorize-error
      LambdaLogLevel: INFO
      UseCanary: true
    integration:
      dynatraceSecretArn: arn:aws:secretsmanager:eu-west-2:216552277552:secret:DynatraceNonProductionVariables # pragma: allowlist-secret
      apiDomain: api.manage.integration.account.gov.uk
      authorizeErrorPageUrl: http://manage.integration.account.gov.uk/authorize-error
      LambdaLogLevel: INFO
      UseCanary: true
    production:
      dynatraceSecretArn: arn:aws:secretsmanager:eu-west-2:216552277552:secret:DynatraceProductionVariables # pragma: allowlist-secret
      apiDomain: api.manage.account.gov.uk
      authorizeErrorPageUrl: http://manage.account.gov.uk/authorize-error
      LambdaLogLevel: INFO
      UseCanary: true

Conditions:
  UseCodeSigning:
    Fn::Not:
      - Fn::Equals:
          - !Ref CodeSigningConfigArn
          - "none"
  UsePermissionsBoundary:
    Fn::Not:
      - Fn::Equals:
          - !Ref PermissionsBoundary
          - "none"
  IsLocal:
    Fn::Equals:
      - !Ref "AWS::Region"
      - "local"
  CanariesEnabled: !Equals
    - !FindInMap [EnvironmentConfiguration, !Ref Environment, UseCanary]
    - true

Globals:
  Function:
    DeploymentPreference:
      Type: !If
        - CanariesEnabled
        - !Ref LambdaDeploymentPreference
        - AllAtOnce
      Alarms: []
      Role: !GetAtt CodeDeployServiceRole.Arn
    Tracing: Active
    AutoPublishAlias: live
    KmsKeyArn: !Sub "{{resolve:ssm:/${CoreStackName}/LambdaEnvironmentVariableEncryptionKeyArn}}"
    CodeSigningConfigArn: !If
      - UseCodeSigning
      - !Ref CodeSigningConfigArn
      - !Ref AWS::NoValue
    PermissionsBoundary: !If
      - UsePermissionsBoundary
      - !Ref PermissionsBoundary
      - !Ref AWS::NoValue
    VpcConfig:
      SubnetIds:
        - Fn::ImportValue: !Sub ${VpcStackName}-PrivateSubnetIdA
        - Fn::ImportValue: !Sub ${VpcStackName}-PrivateSubnetIdB
        - Fn::ImportValue: !Sub ${VpcStackName}-PrivateSubnetIdC
      SecurityGroupIds:
        - Fn::ImportValue: !Sub ${VpcStackName}-AWSServicesEndpointSecurityGroupId
    Timeout: 10
    MemorySize: 256
    Architectures:
      - !Ref LambdaArchitecture
    Runtime: nodejs22.x
    Layers:
      - !If [
          IsLocal,
          !Ref AWS::NoValue,
          "arn:aws:lambda:eu-west-2:216552277552:layer:Dynatrace_OneAgent_1_313_2_20250404-043044_with_collector_nodejs:1",
        ]
    Environment:
      Variables:
        POWERTOOLS_LOG_LEVEL:
          !FindInMap [
            EnvironmentConfiguration,
            !Ref Environment,
            LambdaLogLevel,
          ]
        POWERTOOLS_SERVICE_NAME: !Ref AWS::StackName
        AWS_XRAY_CONTEXT_MISSING: IGNORE_ERROR
        NODE_OPTIONS: !If [IsLocal, "--enable-source-maps", !Ref AWS::NoValue]
        USE_LOCALSTACK: !Ref AWS::NoValue
        ENVIRONMENT: !Ref Environment
        NODE_ENV: "production"
        LOCALSTACK_ENDPOINT: !Ref AWS::NoValue
        LOCALSTACK_ACCESS_KEY_ID: !Ref AWS::NoValue
        LOCALSTACK_ACCESS_KEY: !Ref AWS::NoValue
        AWS_LAMBDA_EXEC_WRAPPER:
          !If [IsLocal, !Ref AWS::NoValue, "/opt/dynatrace"]
        DT_CONNECTION_AUTH_TOKEN: !Sub
          - "{{resolve:secretsmanager:${SecretArn}:SecretString:DT_CONNECTION_AUTH_TOKEN}}" # pragma: allowlist-secret
          - SecretArn:
              !FindInMap [
                EnvironmentConfiguration,
                !Ref Environment,
                dynatraceSecretArn,
              ]
        DT_CONNECTION_BASE_URL: !Sub
          - "{{resolve:secretsmanager:${SecretArn}:SecretString:DT_CONNECTION_BASE_URL}}" # pragma: allowlist-secret
          - SecretArn:
              !FindInMap [
                EnvironmentConfiguration,
                !Ref Environment,
                dynatraceSecretArn,
              ]
        DT_CLUSTER_ID: !Sub
          - "{{resolve:secretsmanager:${SecretArn}:SecretString:DT_CLUSTER_ID}}" # pragma: allowlist-secret
          - SecretArn:
              !FindInMap [
                EnvironmentConfiguration,
                !Ref Environment,
                dynatraceSecretArn,
              ]
        DT_LOG_COLLECTION_AUTH_TOKEN: !Sub
          - "{{resolve:secretsmanager:${SecretArn}:SecretString:DT_LOG_COLLECTION_AUTH_TOKEN}}" # pragma: allowlist-secret
          - SecretArn:
              !FindInMap [
                EnvironmentConfiguration,
                !Ref Environment,
                dynatraceSecretArn,
              ]
        DT_TENANT: !Sub
          - "{{resolve:secretsmanager:${SecretArn}:SecretString:DT_TENANT}}" # pragma: allowlist-secret
          - SecretArn:
              !FindInMap [
                EnvironmentConfiguration,
                !Ref Environment,
                dynatraceSecretArn,
              ]
        DT_LOGGING_NODEJS_FLAGS: Exporter=true,LambdaSensor=false
        DT_OPEN_TELEMETRY_ENABLE_INTEGRATION: true
        DT_OPEN_TELEMETRY_ALLOW_EXPLICIT_PARENT: true

Resources:
  CodeDeployServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - codedeploy.amazonaws.com
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSCodeDeployRoleForLambda
      PermissionsBoundary:
        !If [
          UsePermissionsBoundary,
          !Ref PermissionsBoundary,
          !Ref AWS::NoValue,
        ]

  ApiDomain:
    Type: AWS::ApiGateway::DomainName
    Properties:
      DomainName:
        !FindInMap [EnvironmentConfiguration, !Ref Environment, apiDomain]
      RegionalCertificateArn:
        Fn::ImportValue: certificate-CertificateARN
      EndpointConfiguration:
        Types:
          - REGIONAL
      SecurityPolicy: TLS_1_2

  ApiOriginRecord:
    Type: AWS::Route53::RecordSet
    Properties:
      Name: !Sub
        - "origin.${BaseAlias}"
        - BaseAlias:
            !FindInMap [EnvironmentConfiguration, !Ref Environment, apiDomain]
      Type: A
      HostedZoneId:
        Fn::ImportValue: hosted-zone-HostedZoneID
      AliasTarget:
        DNSName: !GetAtt ApiDomain.RegionalDomainName
        HostedZoneId: !GetAtt ApiDomain.RegionalHostedZoneId
        EvaluateTargetHealth: false

  ApiWafAssociation:
    Type: "AWS::WAFv2::WebACLAssociation"
    Properties:
      WebACLArn:
        Fn::ImportValue: "cloudfront-api-CloakingOriginWebACLArn"
      ResourceArn: !Sub "arn:aws:apigateway:${AWS::Region}::/restapis/${ApiGateway}/stages/${Environment}"
    DependsOn:
      - ApiGatewayStage # This resource is created as part of the RestApi resource

  DomainRecord:
    Type: AWS::Route53::RecordSet
    Properties:
      Name: !FindInMap [EnvironmentConfiguration, !Ref Environment, apiDomain]
      Type: A
      HostedZoneId:
        Fn::ImportValue: hosted-zone-HostedZoneID
      AliasTarget:
        DNSName:
          Fn::ImportValue: "cloudfront-api-DistributionDomain"
        HostedZoneId: "Z2FDTNDATAQYW2"
        EvaluateTargetHealth: false

  ApiMapping:
    Type: AWS::ApiGateway::BasePathMapping
    Properties:
      DomainName: !Ref ApiDomain
      RestApiId: !Ref ApiGateway
      Stage: !Ref Environment
    DependsOn:
      - ApiGatewayStage # This resource is created as part of the RestApi resource

  ApiGateway:
    Type: AWS::Serverless::Api
    Properties:
      StageName: !Ref Environment
      AlwaysDeploy: true
      DisableExecuteApiEndpoint: true
      TracingEnabled: true
      EndpointConfiguration:
        Type: REGIONAL
      Tags:
        FMSRegionalPolicy: false
        CustomPolicy: true

  ApiLambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/lambda/${AWS::StackName}/ApiLambdaLogGroup"
      RetentionInDays: 30
      KmsKeyId: !Sub "{{resolve:ssm:/${CoreStackName}/CloudWatchEncryptionKeyArn}}"

  HealthcheckLambda:
    Type: AWS::Serverless::Function
    Properties:
      PackageType: Zip
      Handler: healthcheck.handler
      LoggingConfig:
        LogGroup: !Ref ApiLambdaLogGroup
      Policies:
        - arn:aws:iam::aws:policy/AWSXrayWriteOnlyAccess
      Events:
        Root:
          Type: Api
          Properties:
            Method: GET
            Path: /healthcheck
            RestApiId: !Ref ApiGateway
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Format: "esm"
        OutExtension:
          - .js=.mjs
        Target: "es2022"
        Sourcemap: true
        EntryPoints:
          - solutions/api/src/lambda/healthcheck.ts

  AuthorizeLambda:
    Type: AWS::Serverless::Function
    Properties:
      PackageType: Zip
      Handler: index.handler
      LoggingConfig:
        LogGroup: !Ref ApiLambdaLogGroup
      Events:
        Root:
          Type: Api
          Properties:
            Method: GET
            Path: /authorize
            RestApiId: !Ref ApiGateway
      Environment:
        Variables:
          AUTHORIZE_ERROR_PAGE_URL:
            !FindInMap [
              EnvironmentConfiguration,
              !Ref Environment,
              authorizeErrorPageUrl,
            ]
          JAR_RSA_ENCRYPTION_KEY_ALIAS: !Sub "{{resolve:ssm:/${CoreStackName}/JARRSAEncryptionKeyAliasName}}"
      Policies:
        - arn:aws:iam::aws:policy/AWSXrayWriteOnlyAccess
        - Statement:
            - Effect: Allow
              Action:
                - kms:Decrypt
              Resource: !Sub "{{resolve:ssm:/${CoreStackName}/JARRSAEncryptionKeyArn}}"
            - Effect: Allow
              Action:
                - appconfig:GetLatestConfiguration
                - appconfig:StartConfigurationSession
              Resource: !Sub arn:aws:appconfig:${AWS::Region}:${AWS::AccountId}:application/*
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Format: "esm"
        OutExtension:
          - .js=.mjs
        Target: "es2022"
        Sourcemap: true
        Banner:
          - js=import { createRequire } from 'module'; const require = createRequire(import.meta.url); # Required in order to use AWS Lambda Powertools
        EntryPoints:
          - solutions/api/src/lambda/authorize/index.ts

  ReplayAttackTable:
    Type: AWS::DynamoDB::Table
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      TableName: !Sub ${AWS::StackName}-ReplayAttack
      AttributeDefinitions:
        - AttributeName: nonce
          AttributeType: S
      KeySchema:
        - AttributeName: nonce
          KeyType: HASH
      TimeToLiveSpecification:
        AttributeName: expires
        Enabled: true
      BillingMode: PAY_PER_REQUEST
      ContributorInsightsSpecification:
        Enabled: true
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: false
      SSESpecification:
        KMSMasterKeyId: !Sub "{{resolve:ssm:/${CoreStackName}/DynamoDbSSEKeyArn}}"
        SSEEnabled: true
        SSEType: KMS
      TableClass: STANDARD
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-replay_attack"

  UserInfoTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub ${AWS::StackName}-UserInfo
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: outcome_id
          AttributeType: S
        - AttributeName: outcome_type
          AttributeType: S
        - AttributeName: access_token
          AttributeType: S
      KeySchema:
        - AttributeName: outcome_id
          KeyType: HASH
        - AttributeName: outcome_type
          KeyType: RANGE
      GlobalSecondaryIndexes:
        - IndexName: AccessTokenIndex
          KeySchema:
            - AttributeName: access_token
              KeyType: HASH
          Projection:
            ProjectionType: ALL
      SSESpecification:
        KMSMasterKeyId: !Sub "{{resolve:ssm:/${CoreStackName}/DynamoDbSSEKeyArn}}"
        SSEEnabled: true
        SSEType: KMS
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-user_info"

  AuthCodeTable:
    Type: AWS::DynamoDB::Table
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      TableName: !Sub ${AWS::StackName}-AuthCode
      AttributeDefinitions:
        - AttributeName: "code"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "code"
          KeyType: "HASH"
      BillingMode: PAY_PER_REQUEST
      ContributorInsightsSpecification:
        Enabled: true
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: false
      TimeToLiveSpecification:
        AttributeName: "expiry_time"
        Enabled: true
      SSESpecification:
        KMSMasterKeyId: !Sub "{{resolve:ssm:/${CoreStackName}/DynamoDbSSEKeyArn}}"
        SSEEnabled: true
        SSEType: KMS
      TableClass: STANDARD
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-auth_code"
