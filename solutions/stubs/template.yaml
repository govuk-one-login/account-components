AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31

Parameters:
  Environment:
    Type: String
    Description: >
      The environment type
    AllowedValues:
      - "dev"
      - "build"
  CodeSigningConfigArn:
    Type: String
    Description: >
      The ARN of the Code Signing Config to use, provided by the deployment pipeline
    Default: "none"
  PermissionsBoundary:
    Type: String
    Description: >
      The ARN of the permissions boundary to apply to any role created by the template, provided by the deployment pipeline
    Default: "none"
  VpcStackName:
    Type: String
    Description: >
      The name of the stack that defines the VPC in which resources will be located, provided by the deployment pipeline
  CoreStackName:
    Type: String
    Default: "components-core"
  LambdaDeploymentPreference:
    Description: Specifies the configuration to enable gradual Lambda deployments. It can be used to set deployment type and also allows skipping canary deployment by setting to 'AllAtOnce'
    Type: String
    Default: "Canary10Percent10Minutes"
    AllowedValues:
      - AllAtOnce
      - Canary10Percent5Minutes
      - Canary10Percent10Minutes
      - Canary10Percent15Minutes
      - Canary10Percent30Minutes

Mappings:
  EnvironmentConfiguration:
    dev:
      dynatraceSecretArn: arn:aws:secretsmanager:eu-west-2:216552277552:secret:DynatraceNonProductionVariables # pragma: allowlist-secret
      stubsDomain: stubs.manage.dev.account.gov.uk
      LambdaLogLevel: DEBUG
      UseCanary: false
    build:
      dynatraceSecretArn: arn:aws:secretsmanager:eu-west-2:216552277552:secret:DynatraceNonProductionVariables # pragma: allowlist-secret
      stubsDomain: stubs.manage.build.account.gov.uk
      LambdaLogLevel: INFO
      UseCanary: false

Conditions:
  UseCodeSigning:
    Fn::Not:
      - Fn::Equals:
          - !Ref CodeSigningConfigArn
          - "none"
  UsePermissionsBoundary:
    Fn::Not:
      - Fn::Equals:
          - !Ref PermissionsBoundary
          - "none"
  CanariesEnabled: !Equals
    - !FindInMap [EnvironmentConfiguration, !Ref Environment, UseCanary]
    - true

Globals:
  Function:
    DeploymentPreference:
      Type: !If
        - CanariesEnabled
        - !Ref LambdaDeploymentPreference
        - AllAtOnce
      Alarms: []
      Role:
        Fn::ImportValue: !Sub "${CoreStackName}:CodeDeployServiceRoleArn"
    CodeUri: dist
    Handler: lambda.handler
    Tracing: Active
    AutoPublishAlias: live
    KmsKeyArn:
      Fn::ImportValue: !Sub "${CoreStackName}:LambdaEnvironmentVariableEncryptionKeyArn"
    Layers:
      - arn:aws:lambda:eu-west-2:216552277552:layer:Dynatrace_OneAgent_1_313_2_20250404-043044_with_collector_nodejs:1
    CodeSigningConfigArn: !If
      - UseCodeSigning
      - !Ref CodeSigningConfigArn
      - !Ref AWS::NoValue
    PermissionsBoundary: !If
      - UsePermissionsBoundary
      - !Ref PermissionsBoundary
      - !Ref AWS::NoValue
    VpcConfig:
      SubnetIds:
        - Fn::ImportValue: !Sub ${VpcStackName}-PrivateSubnetIdA
        - Fn::ImportValue: !Sub ${VpcStackName}-PrivateSubnetIdB
        - Fn::ImportValue: !Sub ${VpcStackName}-PrivateSubnetIdC
      SecurityGroupIds:
        - Fn::ImportValue: !Sub ${VpcStackName}-AWSServicesEndpointSecurityGroupId
    Timeout: 10
    MemorySize: 2048
    Architectures:
      - arm64
    Runtime: nodejs22.x
    Environment:
      Variables:
        POWERTOOLS_LOG_LEVEL:
          !FindInMap [
            EnvironmentConfiguration,
            !Ref Environment,
            LambdaLogLevel,
          ]
        POWERTOOLS_SERVICE_NAME: !Ref AWS::StackName
        AWS_XRAY_CONTEXT_MISSING: IGNORE_ERROR
        ENVIRONMENT: !Ref Environment
        NODE_ENV: "production"
        AWS_LAMBDA_EXEC_WRAPPER: /opt/dynatrace
        DT_CONNECTION_AUTH_TOKEN: !Sub
          - "{{resolve:secretsmanager:${SecretArn}:SecretString:DT_CONNECTION_AUTH_TOKEN}}" # pragma: allowlist-secret
          - SecretArn:
              !FindInMap [
                EnvironmentConfiguration,
                !Ref Environment,
                dynatraceSecretArn,
              ]
        DT_CONNECTION_BASE_URL: !Sub
          - "{{resolve:secretsmanager:${SecretArn}:SecretString:DT_CONNECTION_BASE_URL}}" # pragma: allowlist-secret
          - SecretArn:
              !FindInMap [
                EnvironmentConfiguration,
                !Ref Environment,
                dynatraceSecretArn,
              ]
        DT_CLUSTER_ID: !Sub
          - "{{resolve:secretsmanager:${SecretArn}:SecretString:DT_CLUSTER_ID}}" # pragma: allowlist-secret
          - SecretArn:
              !FindInMap [
                EnvironmentConfiguration,
                !Ref Environment,
                dynatraceSecretArn,
              ]
        DT_LOG_COLLECTION_AUTH_TOKEN: !Sub
          - "{{resolve:secretsmanager:${SecretArn}:SecretString:DT_LOG_COLLECTION_AUTH_TOKEN}}" # pragma: allowlist-secret
          - SecretArn:
              !FindInMap [
                EnvironmentConfiguration,
                !Ref Environment,
                dynatraceSecretArn,
              ]
        DT_TENANT: !Sub
          - "{{resolve:secretsmanager:${SecretArn}:SecretString:DT_TENANT}}" # pragma: allowlist-secret
          - SecretArn:
              !FindInMap [
                EnvironmentConfiguration,
                !Ref Environment,
                dynatraceSecretArn,
              ]
        DT_LOGGING_NODEJS_FLAGS: Exporter=true,LambdaSensor=false
        DT_OPEN_TELEMETRY_ENABLE_INTEGRATION: true
        DT_OPEN_TELEMETRY_ALLOW_EXPLICIT_PARENT: true

Resources:
  MockClientECPrivateKeySSM:
    Type: AWS::SSM::Parameter
    Properties:
      Description: A mock client EC private key
      Name: !Sub /${AWS::StackName}/MockClientEcPrivateKey
      Type: String
      Value: "set-me"
      Tags:
        Environment: !Ref Environment

  MockClientECPublicKeySSM:
    Type: AWS::SSM::Parameter
    Properties:
      Description: A mock client EC public key
      Name: !Sub /${AWS::StackName}/MockClientEcPublicKey
      Type: String
      Value: "set-me"
      Tags:
        Environment: !Ref Environment

  StubsApiDomain:
    Type: AWS::ApiGateway::DomainName
    Properties:
      DomainName:
        !FindInMap [EnvironmentConfiguration, !Ref Environment, stubsDomain]
      RegionalCertificateArn:
        Fn::ImportValue: certificate-CertificateARN
      EndpointConfiguration:
        Types:
          - REGIONAL
      SecurityPolicy: TLS_1_2

  StubsRecord:
    Type: AWS::Route53::RecordSet
    Properties:
      Name: !Ref StubsApiDomain
      Type: A
      HostedZoneId:
        Fn::ImportValue: hosted-zone-HostedZoneID
      AliasTarget:
        DNSName: !GetAtt StubsApiDomain.RegionalDomainName
        HostedZoneId: !GetAtt StubsApiDomain.RegionalHostedZoneId
        EvaluateTargetHealth: false

  StubsApiMapping:
    Type: AWS::ApiGateway::BasePathMapping
    Properties:
      DomainName: !Ref StubsApiDomain
      RestApiId: !Ref StubsApiGateway
      Stage: !Ref Environment
    DependsOn:
      - StubsApiGatewayStage # This resource is created as part of the RestApi resource

  StubsApiGateway:
    Type: AWS::Serverless::Api
    Properties:
      StageName: !Ref Environment
      AlwaysDeploy: true
      EndpointConfiguration:
        Type: REGIONAL
      BinaryMediaTypes:
        - "*/*"
      Tags:
        FMSRegionalPolicy: false
        CustomPolicy: true

  StubsLambda:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: makefile
    Properties:
      Events:
        Root:
          Type: Api
          Properties:
            Method: ANY
            Path: /
            RestApiId: !Ref StubsApiGateway
        CatchAll:
          Type: Api
          Properties:
            Method: ANY
            Path: /{proxy+}
            RestApiId: !Ref StubsApiGateway
      LoggingConfig:
        LogGroup: !Ref StubsLambdaLogGroup
      Environment:
        Variables:
          MOCK_CLIENT_EC_PRIVATE_KEY_SSM_NAME: !Sub "/${AWS::StackName}/MockClientEcPrivateKey"
          MOCK_CLIENT_EC_PUBLIC_KEY_SSM_NAME: !Sub "/${AWS::StackName}/MockClientEcPublicKey"
          JAR_RSA_ENCRYPTION_KEY_ALIAS: !Sub "alias/${CoreStackName}-JARRSAEncryptionKey"
          DEFAULT_AUDIENCE: !Sub "https://api.manage.${Environment}.account.gov.uk/authorize"
          ACCESS_TOKEN_ISSUER: !Sub "https://stubs.manage.${Environment}.account.gov.uk"
          AUTHORIZE_URL: !Sub "https://api.manage.${Environment}.account.gov.uk/authorize"
      Policies:
        - arn:aws:iam::aws:policy/AWSXrayWriteOnlyAccess
        - Statement:
            - Effect: Allow
              Action:
                - ssm:GetParameter
                - ssm:GetParameters
                - ssm:GetParametersByPath
              Resource:
                - !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${AWS::StackName}/MockClientEcPublicKey
                - !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${AWS::StackName}/MockClientEcPrivateKey
            - Effect: Allow
              Action:
                - appconfig:GetLatestConfiguration
                - appconfig:StartConfigurationSession
              Resource: !Sub arn:aws:appconfig:${AWS::Region}:${AWS::AccountId}:application/*
            - Effect: Allow
              Action:
                - kms:GetPublicKey
              Resource: !Sub
                - "arn:aws:kms:${AWS::Region}:${AWS::AccountId}:${AliasName}"
                - AliasName:
                    Fn::ImportValue: !Sub "${CoreStackName}:JARRSAEncryptionKeyAliasName"

  StubsLambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/lambda/${AWS::StackName}/StubsLambda"
      RetentionInDays: 30
      KmsKeyId:
        Fn::ImportValue: !Sub "${CoreStackName}:CloudWatchEncryptionKeyArn"
