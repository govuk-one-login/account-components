AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31

Parameters:
  Environment:
    Type: String
    Description: >
      The environment type
    AllowedValues:
      - "dev"
      - "build"
      - "staging"
      - "integration"
      - "production"
  CodeSigningConfigArn:
    Type: String
    Description: >
      The ARN of the Code Signing Config to use, provided by the deployment pipeline
    Default: "none"
  PermissionsBoundary:
    Type: String
    Description: >
      The ARN of the permissions boundary to apply to any role created by the template, provided by the deployment pipeline
    Default: "none"
  VpcStackName:
    Type: String
    Description: >
      The name of the stack that defines the VPC in which resources will be located, provided by the deployment pipeline

Resources:
  DynamoDbSSEKey:
    Type: AWS::KMS::Key
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      Description: AWS KMS key for encrypting the data stored within DynamoDB tables
      EnableKeyRotation: true
      KeyPolicy:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              AWS: !Sub "arn:aws:iam::${AWS::AccountId}:root"
            Action:
              - kms:*
            Resource: "*"
          - Effect: Allow
            Principal:
              Service: "dynamodb.amazonaws.com"
            Action:
              - "kms:Encrypt"
              - "kms:Decrypt"
              - "kms:ReEncrypt*"
              - "kms:GenerateDataKey*"
              - "kms:DescribeKey"
              - "kms:CreateGrant"
            Resource: "*"
            Condition:
              ArnEquals:
                aws:SourceArn: !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/*"
          - Effect: Allow
            Principal:
              Service: "lambda.amazonaws.com"
            Action:
              - "kms:Decrypt"
              - "kms:GenerateDataKey"
            Resource: "*"
            Condition:
              ArnEquals:
                aws:SourceArn: !Sub "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:*"
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-DynamoDbSSEKey"

  DynamoDbSSEKeyAlias:
    Type: AWS::KMS::Alias
    Properties:
      AliasName: !Sub "alias/${AWS::StackName}-DynamoDbSSEKey"
      TargetKeyId: !GetAtt DynamoDbSSEKey.Arn

  DynamoDbSSEKeyArnSSM:
    Type: AWS::SSM::Parameter
    Properties:
      Description: "The ARN of the DynamoDbSSEKey KMS key"
      Name: !Sub "/${AWS::StackName}/KMS/DynamoDbSSEKey/ARN"
      Type: String
      Value: !GetAtt DynamoDbSSEKey.Arn

  JARRSAEncryptionKeyV2:
    Type: AWS::KMS::Key
    Properties:
      Description: "RSA KMS key pair used to encrypt and decrypt JARs"
      KeySpec: RSA_2048
      KeyUsage: ENCRYPT_DECRYPT
      Origin: AWS_KMS
      Enabled: true
      KeyPolicy:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              AWS: !Sub "arn:aws:iam::${AWS::AccountId}:root"
            Action:
              - kms:*
            Resource: "*"
          - Effect: "Allow"
            Principal:
              Service: lambda.amazonaws.com
            Action:
              - "kms:Decrypt"
            Resource: "*"
            Condition:
              ArnLike:
                "aws:SourceArn": !Sub "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:component-core*"
          - Effect: "Allow"
            Principal:
              Service: lambda.amazonaws.com
            Action:
              - "kms:ListAliases"
              - "kms:GetPublicKey"
            Resource: "*"
            Condition:
              ArnLike:
                "aws:SourceArn":
                  - !Sub "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:jwks-creator"
                  - !Sub "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:*StubsLambda*"
                  - !Sub "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:component-core*"
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-JARRSAEncryptionKeyV2"

  JARRSAEncryptionKeyAlias:
    Type: AWS::KMS::Alias
    Properties:
      AliasName: !Sub "alias/${AWS::StackName}-JARRSAEncryptionKey"
      TargetKeyId: !GetAtt JARRSAEncryptionKeyV2.Arn

  S3SSEKey:
    Type: AWS::KMS::Key
    Properties:
      Description: KMS key for encrypting JWKSStore bucket
      EnableKeyRotation: true
      KeyPolicy:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              AWS: !Sub "arn:aws:iam::${AWS::AccountId}:root"
            Action:
              - kms:*
            Resource: "*"

  JWKSStoreBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "${AWS::StackName}-jwks-store"
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      VersioningConfiguration:
        Status: Enabled
      LoggingConfiguration:
        DestinationBucketName: !Sub "${AWS::StackName}-access-logs"
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: aws:kms
              KMSMasterKeyID: !Ref S3SSEKey

  JWKSStoreBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref JWKSStoreBucket
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: AllowLambdaToPutObjects
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action:
              - s3:PutObject
            Condition:
              Bool:
                aws:SecureTransport: true
            Resource: !Sub "arn:aws:s3:::${JWKSStoreBucket}/*"
          - Sid: AllowApiGatewayToGetObjects
            Effect: Allow
            Principal:
              Service: apigateway.amazonaws.com
            Action:
              - s3:GetObject
            Resource: !Sub "arn:aws:s3:::${JWKSStoreBucket}/*"

  AccessLogsBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "${AWS::StackName}-access-logs"
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      VersioningConfiguration:
        Status: Enabled
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: aws:kms
              KMSMasterKeyID: !Ref S3SSEKey

  AccessLogBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref AccessLogsBucket
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: EnforceHTTPSOnly
            Effect: Deny
            Principal: "*"
            Action: "s3:*"
            Resource:
              - !Sub "${AccessLogsBucket.Arn}"
              - !Sub "${AccessLogsBucket.Arn}/*"
            Condition:
              Bool:
                aws:SecureTransport: "false"
          - Sid: AllowS3LoggingService
            Effect: Allow
            Principal:
              Service: "logging.s3.amazonaws.com"
            Action: "s3:PutObject"
            Resource: !Sub "${AccessLogsBucket.Arn}/AWSLogs/${AWS::AccountId}/*"
            Condition:
              StringEquals:
                aws:SourceAccount: !Ref AWS::AccountId
              Bool:
                "aws:SecureTransport": true

Outputs:
  DynamoDbSSEKeyArn:
    Description: ARN of the KMS key used to encrypt DynamoDB tables
    Value: !GetAtt DynamoDbSSEKey.Arn
    Export:
      Name: !Sub "${AWS::StackName}:DynamoDbSSEKeyArn"
  JARRSAEncryptionKeyAliasName:
    Description: Alias name of the JAR RSA encryption KMS key
    Value: !Ref JARRSAEncryptionKeyAlias
    Export:
      Name: !Sub "${AWS::StackName}:JARRSAEncryptionKeyAliasName"
  JWKSStoreBucketName:
    Description: Name of the S3 bucket
    Value: !Ref JWKSStoreBucket
  S3SSEKeyArn:
    Description: ARN of the KMS key used for encryption
    Value: !GetAtt S3SSEKey.Arn
