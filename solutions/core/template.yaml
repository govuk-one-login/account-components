AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31

Description: >-
  Core Account Management stack.

Parameters:
  Environment:
    Type: String
    Description: The name of the environment to deploy to
    AllowedValues:
      - dev
      - build
      - staging
      - integration
      - production
    Default: "dev"
  CodeSigningConfigArn:
    Type: String
    Description: >
      The ARN of the Code Signing Config to use, provided by the deployment pipeline
    Default: "none"
  PermissionsBoundary:
    Type: String
    Description: >
      The ARN of the permissions boundary to apply to any role created by the template, provided by the deployment pipeline
    Default: "none"
  VpcStackName:
    Type: String
    Description: >
      The name of the stack that defines the VPC in which resources will be located, provided by the deployment pipeline
    Default: "vpc"
  LambdaDeploymentPreference:
    Description: Specifies the configuration to enable gradual Lambda deployments. It can be used to set deployment type and also allows skipping canary deployment by setting to 'AllAtOnce'
    Type: String
    Default: "Canary10Percent10Minutes"
    AllowedValues:
      - AllAtOnce
      - Canary10Percent5Minutes
      - Canary10Percent10Minutes
      - Canary10Percent15Minutes
      - Canary10Percent30Minutes

Conditions:
  UseCodeSigning:
    Fn::Not:
      - Fn::Equals:
          - !Ref CodeSigningConfigArn
          - "none"
  UsePermissionsBoundary:
    Fn::Not:
      - Fn::Equals:
          - !Ref PermissionsBoundary
          - "none"
  CanariesEnabled: !Equals
    - !FindInMap [EnvConfig, !Ref Environment, UseCanary]
    - true

Mappings:
  EnvConfig:
    dev:
      LambdaLogLevel: DEBUG
      dynatraceSecretArn: arn:aws:secretsmanager:eu-west-2:216552277552:secret:DynatraceNonProductionVariables #pragma: allowlist secret
      UseCanary: false
    build:
      LambdaLogLevel: INFO
      dynatraceSecretArn: arn:aws:secretsmanager:eu-west-2:216552277552:secret:DynatraceNonProductionVariables #pragma: allowlist secret
      UseCanary: false
    staging:
      LambdaLogLevel: INFO
      dynatraceSecretArn: arn:aws:secretsmanager:eu-west-2:216552277552:secret:DynatraceNonProductionVariables #pragma: allowlist secret
      UseCanary: true
    integration:
      LambdaLogLevel: INFO
      dynatraceSecretArn: arn:aws:secretsmanager:eu-west-2:216552277552:secret:DynatraceNonProductionVariables #pragma: allowlist secret
      UseCanary: true
    production:
      LambdaLogLevel: INFO
      dynatraceSecretArn: arn:aws:secretsmanager:eu-west-2:216552277552:secret:DynatraceProductionVariables #pragma: allowlist secret
      UseCanary: true

Globals:
  Function:
    Runtime: nodejs22.x
    Architectures:
      - arm64
    Tracing: Active
    AutoPublishAlias: live
    CodeUri: ../../
    CodeSigningConfigArn: !If
      - UseCodeSigning
      - !Ref CodeSigningConfigArn
      - !Ref AWS::NoValue
    Environment:
      Variables:
        POWERTOOLS_LOG_LEVEL:
          !FindInMap [EnvConfig, !Ref Environment, LambdaLogLevel]
        POWERTOOLS_SERVICE_NAME: !Ref AWS::StackName
        AWS_LAMBDA_EXEC_WRAPPER: /opt/dynatrace
        AWS_XRAY_CONTEXT_MISSING: IGNORE_ERROR
        DT_CONNECTION_AUTH_TOKEN: !Sub
          - "{{resolve:secretsmanager:${SecretArn}:SecretString:DT_CONNECTION_AUTH_TOKEN}}" #pragma: allowlist secret
          - SecretArn:
              !FindInMap [EnvConfig, !Ref Environment, dynatraceSecretArn]
        DT_CONNECTION_BASE_URL: !Sub
          - "{{resolve:secretsmanager:${SecretArn}:SecretString:DT_CONNECTION_BASE_URL}}" #pragma: allowlist secret
          - SecretArn:
              !FindInMap [EnvConfig, !Ref Environment, dynatraceSecretArn]
        DT_CLUSTER_ID: !Sub
          - "{{resolve:secretsmanager:${SecretArn}:SecretString:DT_CLUSTER_ID}}" #pragma: allowlist secret
          - SecretArn:
              !FindInMap [EnvConfig, !Ref Environment, dynatraceSecretArn]
        DT_LOG_COLLECTION_AUTH_TOKEN: !Sub
          - "{{resolve:secretsmanager:${SecretArn}:SecretString:DT_LOG_COLLECTION_AUTH_TOKEN}}" #pragma: allowlist secret
          - SecretArn:
              !FindInMap [EnvConfig, !Ref Environment, dynatraceSecretArn]
        DT_TENANT: !Sub
          - "{{resolve:secretsmanager:${SecretArn}:SecretString:DT_TENANT}}" #pragma: allowlist secret
          - SecretArn:
              !FindInMap [EnvConfig, !Ref Environment, dynatraceSecretArn]
        DT_LOGGING_NODEJS_FLAGS: Exporter=true,LambdaSensor=false
        DT_OPEN_TELEMETRY_ENABLE_INTEGRATION: true
        DT_OPEN_TELEMETRY_ALLOW_EXPLICIT_PARENT: true
    VpcConfig:
      SubnetIds:
        - Fn::ImportValue: !Sub ${VpcStackName}-ProtectedSubnetIdA
        - Fn::ImportValue: !Sub ${VpcStackName}-ProtectedSubnetIdB
        - Fn::ImportValue: !Sub ${VpcStackName}-ProtectedSubnetIdC
      SecurityGroupIds:
        - Fn::ImportValue: !Sub ${VpcStackName}-AWSServicesEndpointSecurityGroupId
    Layers:
      - "arn:aws:lambda:eu-west-2:216552277552:layer:Dynatrace_OneAgent_1_323_2_20250822-051314_with_collector_nodejs:1"

Resources:
  DynamoDbSSEKey:
    Type: AWS::KMS::Key
    Properties:
      Description: AWS KMS key for encrypting the data stored within DynamoDB tables
      EnableKeyRotation: true
      KeyPolicy:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              AWS: !Sub "arn:aws:iam::${AWS::AccountId}:root"
            Action:
              - "kms:*"
            Resource: "*"
          - Effect: Allow
            Principal:
              Service: "dynamodb.amazonaws.com"
            Action:
              - "kms:Encrypt"
              - "kms:Decrypt"
              - "kms:ReEncrypt*"
              - "kms:GenerateDataKey*"
              - "kms:DescribeKey"
              - "kms:CreateGrant"
            Resource: "*"
            Condition:
              ArnEquals:
                aws:SourceArn: !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/*"
          - Effect: Allow
            Principal:
              Service: "lambda.amazonaws.com"
            Action:
              - "kms:Decrypt"
              - "kms:GenerateDataKey"
            Resource: "*"
            Condition:
              ArnEquals:
                aws:SourceArn: !Sub "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:*"
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-DynamoDbSSEKey"

  DynamoDbSSEKeyAlias:
    Type: AWS::KMS::Alias
    Properties:
      AliasName: !Sub "alias/${AWS::StackName}-DynamoDbSSEKey"
      TargetKeyId: !GetAtt DynamoDbSSEKey.Arn

  DynamoDbSSEKeyArnSSM:
    Type: AWS::SSM::Parameter
    Properties:
      Description: "The ARN of the DynamoDbSSEKey KMS key"
      Name: !Sub "/${AWS::StackName}/KMS/DynamoDbSSEKey/ARN"
      Type: String
      Value: !GetAtt DynamoDbSSEKey.Arn

  CloudWatchEncryptionKey:
    Type: AWS::KMS::Key
    Properties:
      Description: AWS KMS key for encrypting CloudWatch logs
      EnableKeyRotation: true
      KeyPolicy:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              AWS: !Sub "arn:aws:iam::${AWS::AccountId}:root"
            Action: "kms:*"
            Resource: "*"
          - Effect: Allow
            Principal:
              Service: !Sub "logs.${AWS::Region}.amazonaws.com"
            Action:
              - "kms:Encrypt*"
              - "kms:Decrypt*"
              - "kms:ReEncrypt*"
              - "kms:GenerateDataKey*"
              - "kms:Describe*"
            Resource: "*"
            Condition:
              ArnLike:
                "kms:EncryptionContext:aws:logs:arn": !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*"
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-CloudWatchEncryptionKey"

  CloudWatchEncryptionKeyAlias:
    Type: AWS::KMS::Alias
    Properties:
      AliasName: !Sub "alias/${AWS::StackName}-CloudWatchEncryptionKey"
      TargetKeyId: !GetAtt CloudWatchEncryptionKey.Arn

  LambdaEnvironmentVariableEncryptionKey:
    Type: AWS::KMS::Key
    Properties:
      Description: "KMS key used to encrypt lambda environment variables"
      EnableKeyRotation: true
      KeyPolicy:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              AWS: !Sub "arn:aws:iam::${AWS::AccountId}:root"
            Action:
              - kms:*
            Resource: "*"
          - Effect: "Allow"
            Principal:
              Service: lambda.amazonaws.com
            Action:
              - "kms:Decrypt"
            Resource: "*"
            Condition:
              ArnLike:
                "aws:SourceArn": !Sub "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:*"
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-LambdaEnvironmentVariableEncryptionKey"

  LambdaEnvironmentVariableEncryptionKeyAlias:
    Type: AWS::KMS::Alias
    Properties:
      AliasName: !Sub "alias/${AWS::StackName}-LambdaEnvironmentVariableEncryptionKey"
      TargetKeyId: !GetAtt LambdaEnvironmentVariableEncryptionKey.Arn

  JARRSAEncryptionKey:
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Type: AWS::KMS::Key
    Properties:
      Description: "RSA KMS key pair used to encrypt and decrypt JARs"
      KeySpec: RSA_2048
      KeyUsage: ENCRYPT_DECRYPT
      Origin: AWS_KMS
      Enabled: true
      KeyPolicy:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              AWS: !Sub "arn:aws:iam::${AWS::AccountId}:root"
            Action:
              - kms:*
            Resource: "*"
          - Effect: "Allow"
            Principal:
              Service: lambda.amazonaws.com
            Action:
              - "kms:Decrypt"
            Resource: "*"
            Condition:
              ArnLike:
                "aws:SourceArn": !Sub "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:*"
          - Effect: "Allow"
            Principal:
              Service: lambda.amazonaws.com
            Action:
              - "kms:ListAliases"
              - "kms:GetPublicKey"
            Resource: "*"
            Condition:
              ArnLike:
                "aws:SourceArn":
                  - !Sub "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:components-mocks-StubsLambda*"
                  - !Sub "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${AWS::StackName}*"
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-JARRSAEncryptionKey"

  JARRSAEncryptionKeyAlias:
    Type: AWS::KMS::Alias
    Properties:
      AliasName: !Sub "alias/${AWS::StackName}-JARRSAEncryptionKey"
      TargetKeyId: !GetAtt JARRSAEncryptionKey.Arn

  JARRSAEncryptionKeyArnSSM:
    Type: AWS::SSM::Parameter
    Properties:
      Description: "The ARN of the JARRSAEncryptionKey KMS key"
      Name: !Sub "/${AWS::StackName}/KMS/JARRSAEncryptionKey/ARN"
      Type: String
      Value: !GetAtt JARRSAEncryptionKey.Arn

  S3SSEKey:
    Type: AWS::KMS::Key
    Properties:
      Description: KMS key for encrypting JWKSStore bucket
      KeyUsage: ENCRYPT_DECRYPT
      KeyPolicy:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              AWS: !Sub "arn:aws:iam::${AWS::AccountId}:root"
            Action:
              - kms:*
            Resource: "*"
          - Effect: Allow
            Principal:
              Service: s3.amazonaws.com
            Action:
              - kms:Encrypt
              - kms:Decrypt
              - kms:ReEncrypt*
              - kms:GenerateDataKey*
              - kms:DescribeKey
            Resource: "*"
            Condition:
              StringEquals:
                kms:ViaService: !Sub "s3.${AWS::Region}.amazonaws.com"
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action:
              - kms:GenerateDataKey
            Resource: "*"
            Condition:
              ArnLike:
                "aws:SourceArn":
                  - !Sub "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${AWS::StackName}*"

  S3SSEKeyAlias:
    Type: AWS::KMS::Alias
    Properties:
      AliasName: !Sub "alias/${AWS::StackName}-S3SSEKey"
      TargetKeyId: !GetAtt S3SSEKey.Arn

  JWKSStoreBucket:
    Type: AWS::S3::Bucket
    DependsOn: AccessLogsBucket
    Properties:
      BucketName: !Sub "${AWS::StackName}-${Environment}-jwks-store"
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      VersioningConfiguration:
        Status: Enabled
      LoggingConfiguration:
        DestinationBucketName: !Sub "${AWS::StackName}-${Environment}-access-logs"
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: aws:kms
              KMSMasterKeyID: !Ref S3SSEKey

  JWKSStoreBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref JWKSStoreBucket
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Deny
            Principal: "*"
            Action: s3:*
            Resource: !Sub "arn:aws:s3:::${JWKSStoreBucket}/*"
            Condition:
              Bool:
                aws:SecureTransport: false
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Resource: !Sub "arn:aws:s3:::${JWKSStoreBucket}/*"
            Action:
              - s3:PutObject
            Condition:
              Bool:
                aws:SecureTransport: true
          - Effect: Allow
            Resource: !Sub "arn:aws:s3:::${JWKSStoreBucket}/*"
            Principal:
              Service: apigateway.amazonaws.com
            Action:
              - s3:GetObject
            Condition:
              Bool:
                aws:SecureTransport: true

  AccessLogsBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "${AWS::StackName}-${Environment}-access-logs"
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      VersioningConfiguration:
        Status: Enabled
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: aws:kms
              KMSMasterKeyID: !Ref S3SSEKey

  AccessLogBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref AccessLogsBucket
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: EnforceHTTPSOnly
            Effect: Deny
            Principal: "*"
            Action: "s3:*"
            Resource:
              - !Sub "${AccessLogsBucket.Arn}"
              - !Sub "${AccessLogsBucket.Arn}/*"
            Condition:
              Bool:
                aws:SecureTransport: "false"
          - Sid: AllowS3LoggingService
            Effect: Allow
            Principal:
              Service: "logging.s3.amazonaws.com"
            Action: "s3:PutObject"
            Resource: !Sub "${AccessLogsBucket.Arn}/AWSLogs/${AWS::AccountId}/*"
            Condition:
              StringEquals:
                aws:SourceAccount: !Ref AWS::AccountId
              Bool:
                "aws:SecureTransport": true

  JwksGeneratorLambda:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${AWS::StackName}-JWKSGenerator"
      Description: "Creates a JWKS doc and stores it into a S3 Bucket"
      MemorySize: 128
      Handler: jwks-creator.handler
      Role: !GetAtt JwksGeneratorLambdaRole.Arn
      ReservedConcurrentExecutions: 1
      Timeout: 15
      KmsKeyArn: !GetAtt LambdaEnvironmentVariableEncryptionKey.Arn
      LoggingConfig:
        LogGroup: !Ref JwksGeneratorLambdaLogGroup
      Environment:
        Variables:
          BUCKET_NAME: !Ref JWKSStoreBucket
          STACK_NAME: !Ref AWS::StackName
      DeploymentPreference:
        Type: !If
          - CanariesEnabled
          - !Ref LambdaDeploymentPreference
          - AllAtOnce
        Alarms: []
        Role: !GetAtt CodeDeployServiceRole.Arn
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Format: esm
        OutExtension:
          - .js=.mjs
        Target: es2022
        Sourcemap: true
        EntryPoints:
          - solutions/core/src/lambda/jwks-creator.ts
        Banner:
          - js=import { createRequire } from 'module'; const require = createRequire(import.meta.url);

  JwksGeneratorLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      PermissionsBoundary: !If
        - UsePermissionsBoundary
        - !Ref PermissionsBoundary
        - !Ref AWS::NoValue
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
        - arn:aws:iam::aws:policy/AWSXrayWriteOnlyAccess
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - "sts:AssumeRole"

  JwksGeneratorLambdaPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Sub "${AWS::StackName}-JwksGeneratorLambdaPolicy"
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - kms:GetPublicKey
              - kms:DescribeKey
            Resource: !GetAtt JARRSAEncryptionKey.Arn
          - Effect: Allow
            Action:
              - kms:GenerateDataKey
            Resource: !GetAtt S3SSEKey.Arn
          - Effect: Allow
            Action:
              - s3:PutObject
            Resource: !Sub "${JWKSStoreBucket.Arn}/*"
          - Effect: Allow
            Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
            Resource: !GetAtt JwksGeneratorLambdaLogGroup.Arn
      Roles:
        - !Ref JwksGeneratorLambdaRole

  JwksGeneratorLambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/JwksGeneratorLambda"
      RetentionInDays: 30
      KmsKeyId: !GetAtt CloudWatchEncryptionKey.Arn

  CodeDeployServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - codedeploy.amazonaws.com
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSCodeDeployRoleForLambda
      PermissionsBoundary:
        !If [
          UsePermissionsBoundary,
          !Ref PermissionsBoundary,
          !Ref AWS::NoValue,
        ]

Outputs:
  DynamoDbSSEKeyArn:
    Description: ARN of the KMS key used to encrypt DynamoDB tables
    Value: !GetAtt DynamoDbSSEKey.Arn
    Export:
      Name: !Sub "${AWS::StackName}:DynamoDbSSEKeyArn"
  JARRSAEncryptionKeyAliasName:
    Description: Alias name of the JAR RSA encryption KMS key
    Value: !Ref JARRSAEncryptionKeyAlias
    Export:
      Name: !Sub "${AWS::StackName}:JARRSAEncryptionKeyAliasName"
  JWKSStoreBucketName:
    Description: Name of the S3 bucket that stores the JWKS document
    Value: !Ref JWKSStoreBucket
  S3SSEKeyArn:
    Description: ARN of the KMS key used for encryption of S3 buckets
    Value: !GetAtt S3SSEKey.Arn
