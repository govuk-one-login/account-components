AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31

Parameters:
  Environment:
    Type: String
    Description: >
      The environment type
    AllowedValues:
      - "dev"
      - "build"
      - "staging"
      - "integration"
      - "production"
  CodeSigningConfigArn:
    Type: String
    Description: >
      The ARN of the Code Signing Config to use, provided by the deployment pipeline
    Default: "none"
  PermissionsBoundary:
    Type: String
    Description: >
      The ARN of the permissions boundary to apply to any role created by the template, provided by the deployment pipeline
    Default: "none"
  VpcStackName:
    Type: String
    Description: >
      The name of the stack that defines the VPC in which resources will be located, provided by the deployment pipeline
  CoreStackName:
    Type: String
    Description: >
      The name of the core stack that provides shared resources such as the DynamoDB KMS key
    Default: "components-core"

Mappings:
  EnvironmentConfiguration:
    dev:
      dynatraceSecretArn: arn:aws:secretsmanager:eu-west-2:216552277552:secret:DynatraceNonProductionVariables # pragma: allowlist-secret
    build:
      dynatraceSecretArn: arn:aws:secretsmanager:eu-west-2:216552277552:secret:DynatraceNonProductionVariables # pragma: allowlist-secret
    staging:
      dynatraceSecretArn: arn:aws:secretsmanager:eu-west-2:216552277552:secret:DynatraceNonProductionVariables # pragma: allowlist-secret
    integration:
      dynatraceSecretArn: arn:aws:secretsmanager:eu-west-2:216552277552:secret:DynatraceNonProductionVariables # pragma: allowlist-secret
    production:
      dynatraceSecretArn: arn:aws:secretsmanager:eu-west-2:216552277552:secret:DynatraceProductionVariables # pragma: allowlist-secret

Conditions:
  UseCodeSigning:
    Fn::Not:
      - Fn::Equals:
          - !Ref CodeSigningConfigArn
          - "none"
  UsePermissionsBoundary:
    Fn::Not:
      - Fn::Equals:
          - !Ref PermissionsBoundary
          - "none"

Globals:
  Function:
    CodeUri: dist
    Handler: lambda.handler
    Layers:
      - arn:aws:lambda:eu-west-2:216552277552:layer:Dynatrace_OneAgent_1_313_2_20250404-043044_with_collector_nodejs:1
    CodeSigningConfigArn: !If
      - UseCodeSigning
      - !Ref CodeSigningConfigArn
      - !Ref AWS::NoValue
    PermissionsBoundary: !If
      - UsePermissionsBoundary
      - !Ref PermissionsBoundary
      - !Ref AWS::NoValue
    VpcConfig:
      SubnetIds:
        - Fn::ImportValue: !Sub ${VpcStackName}-PrivateSubnetIdA
        - Fn::ImportValue: !Sub ${VpcStackName}-PrivateSubnetIdB
        - Fn::ImportValue: !Sub ${VpcStackName}-PrivateSubnetIdC
      SecurityGroupIds:
        - Fn::ImportValue: !Sub ${VpcStackName}-AWSServicesEndpointSecurityGroupId
    Timeout: 10
    MemorySize: 2048
    Architectures:
      - arm64
    Runtime: nodejs22.x
    Environment:
      Variables:
        ENVIRONMENT: !Ref Environment
        NODE_ENV: "production"
        AWS_LAMBDA_EXEC_WRAPPER: /opt/dynatrace
        DT_CONNECTION_AUTH_TOKEN: !Sub
          - "{{resolve:secretsmanager:${SecretArn}:SecretString:DT_CONNECTION_AUTH_TOKEN}}" # pragma: allowlist-secret
          - SecretArn:
              !FindInMap [
                EnvironmentConfiguration,
                !Ref Environment,
                dynatraceSecretArn,
              ]
        DT_CONNECTION_BASE_URL: !Sub
          - "{{resolve:secretsmanager:${SecretArn}:SecretString:DT_CONNECTION_BASE_URL}}" # pragma: allowlist-secret
          - SecretArn:
              !FindInMap [
                EnvironmentConfiguration,
                !Ref Environment,
                dynatraceSecretArn,
              ]
        DT_CLUSTER_ID: !Sub
          - "{{resolve:secretsmanager:${SecretArn}:SecretString:DT_CLUSTER_ID}}" # pragma: allowlist-secret
          - SecretArn:
              !FindInMap [
                EnvironmentConfiguration,
                !Ref Environment,
                dynatraceSecretArn,
              ]
        DT_LOG_COLLECTION_AUTH_TOKEN: !Sub
          - "{{resolve:secretsmanager:${SecretArn}:SecretString:DT_LOG_COLLECTION_AUTH_TOKEN}}" # pragma: allowlist-secret
          - SecretArn:
              !FindInMap [
                EnvironmentConfiguration,
                !Ref Environment,
                dynatraceSecretArn,
              ]
        DT_TENANT: !Sub
          - "{{resolve:secretsmanager:${SecretArn}:SecretString:DT_TENANT}}" # pragma: allowlist-secret
          - SecretArn:
              !FindInMap [
                EnvironmentConfiguration,
                !Ref Environment,
                dynatraceSecretArn,
              ]
        DT_OPEN_TELEMETRY_ENABLE_INTEGRATION: "true"

Resources:
  FrontendLambdaEnvironmentVariablesEncryptionKey:
    Type: AWS::KMS::Key
    Properties:
      Description: KMS key used to encrypt lambda environment variables
      EnableKeyRotation: true
      KeyPolicy:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              AWS: !Sub "arn:aws:iam::${AWS::AccountId}:root"
            Action:
              - kms:*
            Resource: "*"
          - Effect: "Allow"
            Principal:
              Service: lambda.amazonaws.com
            Action:
              - "kms:Decrypt"
            Resource: "*"
            Condition:
              ArnLike:
                "aws:SourceArn": !Sub "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:*"
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-FrontendLambdaEnvironmentVariablesEncryptionKey"

  UserInfoTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub ${AWS::StackName}-UserInfo
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: outcome_id
          AttributeType: S
        - AttributeName: outcome_type
          AttributeType: S
        - AttributeName: access_token
          AttributeType: S
      KeySchema:
        - AttributeName: outcome_id
          KeyType: HASH
        - AttributeName: outcome_type
          KeyType: RANGE
      GlobalSecondaryIndexes:
        - IndexName: AccessTokenIndex
          KeySchema:
            - AttributeName: access_token
              KeyType: HASH
          Projection:
            ProjectionType: ALL
      SSESpecification:
        KMSMasterKeyId:
          Fn::ImportValue: !Sub "${CoreStackName}:DynamoDbSSEKeyArn"
        SSEEnabled: true
        SSEType: KMS
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-user_info"

  SessionsTable:
    Type: AWS::DynamoDB::Table
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      TableName: !Sub ${AWS::StackName}-SessionStore
      AttributeDefinitions:
        - AttributeName: "id"
          AttributeType: "S"
        - AttributeName: "user_id"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "id"
          KeyType: "HASH"
      TimeToLiveSpecification:
        AttributeName: "expires"
        Enabled: true
      BillingMode: PAY_PER_REQUEST
      ContributorInsightsSpecification:
        Enabled: true
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: false
      GlobalSecondaryIndexes:
        - IndexName: "users-sessions"
          KeySchema:
            - AttributeName: "user_id"
              KeyType: "HASH"
          Projection:
            ProjectionType: KEYS_ONLY
      SSESpecification:
        KMSMasterKeyId:
          Fn::ImportValue: !Sub "${CoreStackName}:DynamoDbSSEKeyArn"
        SSEEnabled: true
        SSEType: KMS
      TableClass: STANDARD

  AuthCodeTable:
    Type: AWS::DynamoDB::Table
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      TableName: !Sub ${AWS::StackName}-AuthCode
      AttributeDefinitions:
        - AttributeName: "code"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "code"
          KeyType: "HASH"
      BillingMode: PAY_PER_REQUEST
      ContributorInsightsSpecification:
        Enabled: true
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: false
      TimeToLiveSpecification:
        AttributeName: "expiry_time"
        Enabled: true
      SSESpecification:
        KMSMasterKeyId:
          Fn::ImportValue: !Sub "${CoreStackName}:DynamoDbSSEKeyArn"
        SSEEnabled: true
        SSEType: KMS
      TableClass: STANDARD
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-auth_code"

  ReplayAttackTable:
    Type: AWS::DynamoDB::Table
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      TableName: !Sub ${AWS::StackName}-ReplayAttack
      AttributeDefinitions:
        - AttributeName: nonce
          AttributeType: S
      KeySchema:
        - AttributeName: nonce
          KeyType: HASH
      TimeToLiveSpecification:
        AttributeName: expires
        Enabled: true
      BillingMode: PAY_PER_REQUEST
      ContributorInsightsSpecification:
        Enabled: true
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: false
      SSESpecification:
        KMSMasterKeyId:
          Fn::ImportValue: !Sub "${CoreStackName}:DynamoDbSSEKeyArn"
        SSEEnabled: true
        SSEType: KMS
      TableClass: STANDARD
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-replay_attack"

  FrontendApiGateway:
    Type: AWS::Serverless::Api
    Properties:
      StageName: !Ref Environment
      EndpointConfiguration:
        Type: REGIONAL
      BinaryMediaTypes:
        - "*/*"
      Tags:
        FMSRegionalPolicy: false
        CustomPolicy: true

  FrontendLambda:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: makefile
    Properties:
      KmsKeyArn: !GetAtt FrontendLambdaEnvironmentVariablesEncryptionKey.Arn
      Events:
        Root:
          Type: Api
          Properties:
            Method: ANY
            Path: /
            RestApiId: !Ref FrontendApiGateway
        CatchAll:
          Type: Api
          Properties:
            Method: ANY
            Path: /{proxy+}
            RestApiId: !Ref FrontendApiGateway
      LoggingConfig:
        LogGroup: !Ref FrontendLambdaLogGroup

  FrontendLambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/lambda/${AWS::StackName}/FrontendLambda"
      RetentionInDays: 30
